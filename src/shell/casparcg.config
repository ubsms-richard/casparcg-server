<?xml version="1.0" encoding="utf-8"?>
<configuration>
    <log-level>warning</log-level>  <!-- [trace|debug|info|warning|error|fatal] -->
    <!-- log-level sets the verbosity of the Servers logs.
        The default option is trace, and if you wouldn't include a <log-level> element in your config, that would be used.
        Other possible options are then defined between the square brackets as trace, debug, info, warning, error and fatal.
        Using <log-level>trace<log-level> would log all activity of the Server, resulting in some very big log files. -->
    <paths>
        <media-path>/var/lib/casparcg/media/</media-path>
        <log-path>/var/log/casparcg/</log-path>
        <data-path>/var/lib/casparcg/data/</data-path>
        <template-path>/var/lib/casparcg/template/</template-path>
    </paths>
    <template-hosts>
    <!-- The Flash producer uses template-hosts to run and control your templates -->
        <template-host>
            <video-mode />
            <filename />
            <width />
            <height />
        </template-host>
    </template-hosts>
    <flash>
        <buffer-depth>auto</buffer-depth> <!-- [auto|1..] -->
        <!-- The Flash producer has a configurable buffer-depth (a positive integer) or auto (which is recomended) -->
    </flash>
    <html>
        <!-- Since CasparCG uses the Chromium Embedded Framework for HTML templates it comes with DevTools built-in.
            If you define a port below you can run a HTML template and connect to it by simply opening up a Chrome
            browser and going to http://localhost:PORT/ to debug your template -->
        <remote-debugging-port>0</remote-debugging-port> <!-- [0|1024-65535] -->
        <!-- Set to zero, remote debugging is disabled -->
        <enable-gpu>false</enable-gpu> <!--  [true|false] -->
        <!-- Here you can enable using GPU accelerated rendering in the HTML producers
            (it might cause issues, so is off by default) -->
    </html>
    <ndi>
    <!-- The latest builds of CasparCG support NDI inputs and outputs -->
        <auto-load>false</auto-load> <!-- [true|false] -->
        <!-- This loads the NDI library when the Server is started -->
    </ndi>
    <channels>
        <channel>
        <!-- Here we define a channel -->
            <video-mode>PAL</video-mode> <!-- [PAL|NTSC|576p2500|720p2398|720p2400|720p2500|720p5000|720p2997|720p5994
                                            |720p3000|720p6000|1080p2398|1080p2400|1080i5000|1080i5994|1080i6000|1080p2500
                                            |1080p2997|1080p3000|1080p5000|1080p5994|1080p6000|1556p2398|1556p2400
                                            |1556p2500|dci1080p2398|dci1080p2400|dci1080p2500|2160p2398|2160p2400
                                            |2160p2500|2160p2997|2160p3000|2160p5000|2160p5994|2160p6000|dci2160p2398
                                            |dci2160p2400|dci2160p2500] -->
            <consumers>
                <!-- <decklink> -->
                    <!-- <device>1</device> [1..] -->
                    <!-- Here you define the number of the output you want to use on the Decklink card -->
                    <!-- <key-device>device + 1</key-device> [1..] -->
                    <!-- CasparCG supports sending the key output on separate output for cards that don't support key+fill
                        outputs natively.  Key-device must be a number other than device. -->
                    <!-- <embedded-audio>false</embedded-audio> [true|false]-->
                    <!-- If CasparCG should embedd audio on the SDI, it results in 1 extra frame of delay -->
                    <!-- <latency>normal</latency>  [normal|low|default]-->
                    <!-- The latency of the processing on the Decklink card, there normal/default is 1 frame slower than
                        low, but is more stable -->
                    <!-- <keyer>external</keyer> [external|external_separate_device|internal|default] -->
                    <!-- Configure the keyer of the card.  If your card support internal key-fill processing (like the
                        Extreme models) you would use external.  If you are using another channel for the key you would
                        use external_separate_device.  Internal keyer will use the input signal on the card and add the
                        keyed signal from CasparCG (passthrough). -->
                    <!-- <key-only>false</key-only> [true|false] -->
                    <!-- Output only the key signal, you would use this when you define a Decklink consumer as the key for
                        another Decklink consumer -->
                    <!-- <buffer-depth>3</buffer-depth> [1..] -->
                    <!-- This sets the buffer of the frames sent to the Decklink card.  Newer 4K models can use a
                        buffer-depth of 2, older models usually need a buffer-depth of 3, increasing the buffer-depth
                        results in higher latency.  There is an upper limit to the buffer-depth, but that depends on
                        the card, system memory and other factors. -->
                <!-- </decklink> -->
                <!-- <bluefish> -->
                    <!-- <device>1</device> [1..] -->
                    <!-- The number of Bluefish card  to use-->
                    <!-- <sdi-stream>1</sdi-stream> [1..] -->
                    <!-- The number of the output to use on the card -->
                    <!-- <embedded-audio>false</embedded-audio> [true|false] -->
                    <!-- Embedd audio on the SDI output -->
                    <!-- <keyer>disabled</keyer> [external|internal|disabled] -->
                    <!-- (external only supported on channels 1 and 3, using 3 requires 4 out connectors) (internal only
                        available on devices with a hardware keyer) -->
                    <!-- <internal-keyer-audio-source>videooutputchannel</internal-keyer-audio-source> [videooutputchannel|sdivideoinput] -->
                    <!-- (only valid when using internal keyer option)  -->
                    <!-- Much like the Decklink above -->
                    <!-- <watchdog>2</watchdog> [0..] -->
                    <!-- (set to 0 to disable the HW watchdog functionality, otherwise this value indicates how many frames to wait after a crash, before enabling the bypass relay's on the card - only works on sdi-stream 1) -->
                <!-- </bluefish> -->
                <system-audio>
                    <channel-layout>stereo</channel-layout> <!-- [mono|stereo|matrix] -->
                    <!-- The channel-layout for the audio from the default Windows or Linux soundcard -->
                    <latency>200</latency> <!--  [0..] -->
                    <!-- Configurable latency, some use this to try and sync system-audio with the video from another output -->
                </system-audio>
                <screen>
                    <!-- <device>1</device> [1..] -->
                    <!-- Which screen to use if windowed is disabled below. Does not work on Linux -->
                    <!-- <aspect-ratio>default</aspect-ratio>  [default|4:3|16:9] -->
                    <!-- Set the aspect-ratio-->
                    <stretch>fill</stretch> <!-- [none|fill|uniform|uniform_to_fill] -->
                    <!-- How to fill the window -->
                    <windowed>true</windowed> <!-- [true|false] -->
                    <!-- If true the output will be in a controllable window, otherwise fullscreen -->
                    <key-only>false</key-only> <!-- [true|false] -->
                    <!-- Output only the key -->
                    <vsync>false</vsync> <!-- [true|false] -->
                    <!-- V-sync -->
                    <borderless>false</borderless> <!-- [true|false] -->
                    <!-- Disable border/window-chrome -->
                    <interactive>true</interactive> <!-- [true|false] -->
                    <!-- If the screen consumer should send mouse interaction to CEF.  You could open up a website and
                        interact withit like it would be running in your browser -->
                    <always-on-top>false</always-on-top> <!-- [true|false] -->
                    <!-- Fix window so it's always on top of other windows -->
                    <x>0</x> <!-- Location -->
                    <y>0</y> <!-- Location -->
                    <width>0</width> <!-- Width (0=not set) -->
                    <height>0</height> <!-- Height (0=not set) -->
                    <sbs-key>false</sbs-key> <!--  [true|false] -->
                    <!-- This enables a side-by-side key which can be used with a DataVideo vision switcher -->
                    <colour-space>RGB</colour-space> <!-- [RGB|datavideo-full|datavideo-limited] -->
                    <!-- (Enables colour space convertion for DataVideo TC-100 / TC-200) -->
                </screen>
                <!-- <newtek-ivga></newtek-ivga> Enable the original iVGA/NDI -->
                <!-- <ndi> -->
                    <!-- <name>Output</name> Defines the name of the NDI output -->
                    <!-- <allow-fields>false</allow-fields>  [true|false] -->
                    <!-- If NDI output should be interlaced or progessive -->
                <!-- </ndi> -->
                <!-- <ffmpeg>
                    <path>[file|url]</path>
                    <args>[most ffmpeg arguments related to filtering and output codecs]</args>
                </ffmpeg> -->
            </consumers>
        </channel>
    </channels>
    <controllers>
        <tcp>
            <port>5250</port>
            <protocol>AMCP</protocol>
        </tcp>
    </controllers>
    <osc>
    <default-port>6250</default-port>
    <disable-send-to-amcp-clients>false</disable-send-to-amcp-clients> <!-- [true|false] -->
    <predefined-clients>
        <predefined-client>
        <address>127.0.0.1</address>
        <port>5253</port>
        </predefined-client>
    </predefined-clients>
    </osc>
</configuration>